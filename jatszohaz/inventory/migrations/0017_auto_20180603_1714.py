# Generated by Django 2.0.1 on 2018-06-03 17:14

import django.core.validators
from django.db import migrations, models


def calc_min_max_players(apps, schema_editor):
    """custom migration script to calculate min and max player numbers from
    existing field."""

    GameGroup = apps.get_model('inventory', 'gamegroup')
    for g in GameGroup.objects.all():
        # if players are not given leave it null
        if g.players:
            try:
                values = g.players.split('-')
                length = len(values)

                g.min_players = int(values[0].strip())
                if length == 2:
                    g.max_players = int(values[1].strip())
                else:
                    g.max_players = g.min_players
            except ValueError:
                print("ValueError in game: %s" % g.name)
            g.save()
        else:
            print("%s skipped due to empty players." % g.name)


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0016_gamegroup_hide'),
    ]

    operations = [
        migrations.AddField(
            model_name='gamegroup',
            name='max_players',
            field=models.IntegerField(help_text='How many players can play at most', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max. players'),
        ),
        migrations.AddField(
            model_name='gamegroup',
            name='min_players',
            field=models.IntegerField(help_text='How many players are needed to play', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Min. players'),
        ),
        migrations.RunPython(calc_min_max_players),
    ]
